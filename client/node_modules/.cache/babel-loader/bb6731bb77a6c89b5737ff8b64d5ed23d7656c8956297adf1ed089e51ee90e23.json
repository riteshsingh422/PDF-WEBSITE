{"ast":null,"code":"import React,{useState}from'react';import{useNavigate}from'react-router-dom';import Navbar from'./Navbar';import'../styles.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=()=>{const[file,setFile]=useState(null);const[category,setCategory]=useState('Schematics');const[successMessage,setSuccessMessage]=useState('');const navigate=useNavigate();const categories=['Schematics','BoardViews','SPI Bios','T2 Bios','Usb -C Bios','Impedance DV / G.R Value','Case Study','Digital Oscilloscope','Images','Videos'];const handleFileChange=e=>{setFile(e.target.files[0]);};const handleDrop=e=>{e.preventDefault();setFile(e.dataTransfer.files[0]);};const handleDragOver=e=>{e.preventDefault();};const handleSubmit=async e=>{e.preventDefault();if(!file){alert('Please select a file first!');return;}const formData=new FormData();formData.append('file',file);// Ensure field name is 'file'\nformData.append('category',category);console.log('Uploading file:',{file:file.name,category});// Debug log\ntry{const response=await fetch('http://localhost:5000/upload',{method:'POST',body:formData});if(!response.ok){let errorMessage='Upload failed';try{const errorData=await response.json();errorMessage=errorData.error||`Server error (${response.status})`;}catch(jsonError){errorMessage=`Server returned ${response.status}: Unable to parse response`;}throw new Error(errorMessage);}const data=await response.json();setSuccessMessage(`File \"${data.name}\" uploaded to \"${data.category}\" successfully!`);setFile(null);}catch(error){console.error('Error uploading file:',error.message,error.stack);alert(`Failed to upload file: ${error.message}`);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-container\",children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"dashboard-title\",children:\"Dashboard\"}),/*#__PURE__*/_jsx(\"p\",{className:\"dashboard-subtitle\",children:\"Upload your files here\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:`upload-card ${file?'dragging':''}`,onDrop:handleDrop,onDragOver:handleDragOver,children:[/*#__PURE__*/_jsx(\"h3\",{className:\"upload-title\",children:\"Upload File\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Category\"}),/*#__PURE__*/_jsx(\"select\",{value:category,onChange:e=>setCategory(e.target.value),className:\"category-select\",children:categories.map(cat=>/*#__PURE__*/_jsx(\"option\",{value:cat,children:cat},cat))})]}),/*#__PURE__*/_jsxs(\"label\",{className:\"upload-label\",children:[\"Choose File\",/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:handleFileChange,className:\"upload-input\"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"drop-text\",children:\"or drag and drop your file here\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"upload-button\",children:\"Upload\"})]}),successMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"success-message\",children:successMessage}),file&&/*#__PURE__*/_jsxs(\"p\",{className:\"success-message\",children:[\"Selected: \",file.name]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"view-pdfs-button\",onClick:()=>navigate('/view-pdf/all'),children:\"View Uploaded Files\"})]})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useNavigate","Navbar","jsx","_jsx","jsxs","_jsxs","Dashboard","file","setFile","category","setCategory","successMessage","setSuccessMessage","navigate","categories","handleFileChange","e","target","files","handleDrop","preventDefault","dataTransfer","handleDragOver","handleSubmit","alert","formData","FormData","append","console","log","name","response","fetch","method","body","ok","errorMessage","errorData","json","error","status","jsonError","Error","data","message","stack","className","children","onDrop","onDragOver","onSubmit","value","onChange","map","cat","type","onClick"],"sources":["/Users/riteshsingh/Desktop/my-pdf-website/client/src/components/Dashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport '../styles.css';\n\nconst Dashboard = () => {\n  const [file, setFile] = useState(null);\n  const [category, setCategory] = useState('Schematics');\n  const [successMessage, setSuccessMessage] = useState('');\n  const navigate = useNavigate();\n\n  const categories = [\n    'Schematics', 'BoardViews', 'SPI Bios', 'T2 Bios', 'Usb -C Bios', \n    'Impedance DV / G.R Value', 'Case Study', 'Digital Oscilloscope', \n    'Images', 'Videos'\n  ];\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    setFile(e.dataTransfer.files[0]);\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!file) {\n      alert('Please select a file first!');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file); // Ensure field name is 'file'\n    formData.append('category', category);\n    console.log('Uploading file:', { file: file.name, category }); // Debug log\n\n    try {\n      const response = await fetch('http://localhost:5000/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!response.ok) {\n        let errorMessage = 'Upload failed';\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.error || `Server error (${response.status})`;\n        } catch (jsonError) {\n          errorMessage = `Server returned ${response.status}: Unable to parse response`;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n      setSuccessMessage(`File \"${data.name}\" uploaded to \"${data.category}\" successfully!`);\n      setFile(null);\n    } catch (error) {\n      console.error('Error uploading file:', error.message, error.stack);\n      alert(`Failed to upload file: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      <Navbar />\n      <div className=\"dashboard-header\">\n        <h1 className=\"dashboard-title\">Dashboard</h1>\n        <p className=\"dashboard-subtitle\">Upload your files here</p>\n      </div>\n      <div className=\"dashboard-content\">\n        <div\n          className={`upload-card ${file ? 'dragging' : ''}`}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n        >\n          <h3 className=\"upload-title\">Upload File</h3>\n          <form onSubmit={handleSubmit}>\n            <div className=\"input-group\">\n              <label>Category</label>\n              <select\n                value={category}\n                onChange={(e) => setCategory(e.target.value)}\n                className=\"category-select\"\n              >\n                {categories.map((cat) => (\n                  <option key={cat} value={cat}>\n                    {cat}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <label className=\"upload-label\">\n              Choose File\n              <input\n                type=\"file\"\n                onChange={handleFileChange}\n                className=\"upload-input\"\n              />\n            </label>\n            <p className=\"drop-text\">or drag and drop your file here</p>\n            <button type=\"submit\" className=\"upload-button\">\n              Upload\n            </button>\n          </form>\n          {successMessage && <p className=\"success-message\">{successMessage}</p>}\n          {file && <p className=\"success-message\">Selected: {file.name}</p>}\n        </div>\n        <button\n          className=\"view-pdfs-button\"\n          onClick={() => navigate('/view-pdf/all')}\n        >\n          View Uploaded Files\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}